version: '3'

vars:
  BINARY_NAME: crum
  BUILD_DIR: ./build
  COVERAGE_DIR: ./coverage

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  clean:
    desc: Clean build artifacts and coverage reports
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -rf {{.COVERAGE_DIR}}
      - rm -f {{.BINARY_NAME}}
      - rm -f coverage.out coverage.html

  deps:
    desc: Download and verify dependencies
    cmds:
      - go mod download
      - go mod verify

  build:
    desc: Build the application
    deps: [clean]
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} .

  test:
    desc: Run all tests
    cmds:
      - echo "Running unit tests..."
      - go test -v ./...

  test-unit:
    desc: Run unit tests only
    cmds:
      - echo "Running unit tests..."
      - go test -v ./... -run "^Test"

  test-integration:
    desc: Run integration tests only
    cmds:
      - echo "Running integration tests..."
      - go test -v ./... -run "Integration"

  test-coverage:
    desc: Run tests with coverage report
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -v -cover -coverprofile={{.COVERAGE_DIR}}/coverage.out ./...
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
      - 'echo "Coverage report generated: {{.COVERAGE_DIR}}/coverage.html"'

  test-coverage-text:
    desc: Run tests with coverage report (text output)
    cmds:
      - go test -v -cover -coverprofile=coverage.out ./...
      - go tool cover -func=coverage.out
      - rm -f coverage.out

  bench:
    desc: Run benchmark tests
    cmds:
      - echo "Running benchmark tests..."
      - go test -v -bench=. -benchmem ./...

  bench-cpu:
    desc: Run benchmark tests with CPU profiling
    cmds:
      - echo "Running benchmark tests with CPU profiling..."
      - go test -v -bench=. -benchmem -cpuprofile=cpu.prof ./...
      - echo "CPU profile saved to cpu.prof"

  bench-mem:
    desc: Run benchmark tests with memory profiling
    cmds:
      - echo "Running benchmark tests with memory profiling..."
      - go test -v -bench=. -benchmem -memprofile=mem.prof ./...
      - echo "Memory profile saved to mem.prof"

  lint:
    desc: Run linter
    cmds:
      - echo "Running linter..."
      - go vet ./...
      - go fmt ./...

  lint-check:
    desc: Check code formatting and linting
    cmds:
      - echo "Checking code formatting..."
      - test -z "$(go fmt ./...)"
      - go vet ./...

  security:
    desc: Run security scanner (requires gosec)
    cmds:
      - echo "Running security scanner..."
      - gosec ./...
    preconditions:
      - sh: command -v gosec
        msg: "gosec is not installed. Run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"

  install:
    desc: Install the binary to $GOPATH/bin
    deps: [build]
    cmds:
      - go install .

  ci:
    desc: Run CI pipeline (lint, test, build)
    cmds:
      - task: lint-check
      - task: test-coverage-text
      - task: build

  ci-full:
    desc: Run full CI pipeline with benchmarks
    cmds:
      - task: deps
      - task: lint-check
      - task: test-coverage
      - task: bench
      - task: build

  demo:
    desc: Run a demo of the application
    deps: [build]
    cmds:
      - echo "Running crum demo..."
      - 'echo "Note: This requires SSH keys to be set up"'
      - './{{.BUILD_DIR}}/{{.BINARY_NAME}} --help'

  watch:
    desc: Watch for changes and run tests
    cmds:
      - echo "Watching for changes... (requires fswatch)"
      - fswatch -o . | xargs -n1 -I{} task test-unit
    preconditions:
      - sh: command -v fswatch
        msg: "fswatch is not installed. Install with: brew install fswatch (macOS) or apt-get install fswatch (Ubuntu)"

  setup-dev:
    desc: Setup development environment
    cmds:
      - echo "Setting up development environment..."
      - go mod download
      - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - go install github.com/go-task/task/v3/cmd/task@latest
      - echo "Development environment setup complete!"

  test-verbose:
    desc: Run tests with verbose output (no filtering)
    cmds:
      - echo "Running tests with verbose output..."
      - go test -v ./...

  test-race:
    desc: Run tests with race detection
    cmds:
      - echo "Running tests with race detection..."
      - go test -v -race ./...

  test-short:
    desc: Run tests in short mode
    cmds:
      - echo "Running tests in short mode..."
      - go test -v -short ./...

  profile-cpu:
    desc: Profile CPU usage during tests
    cmds:
      - echo "Profiling CPU usage during tests..."
      - go test -v -cpuprofile=cpu.prof ./...
      - echo "CPU profile saved to cpu.prof"
      - 'echo "View with: go tool pprof cpu.prof"'

  profile-mem:
    desc: Profile memory usage during tests
    cmds:
      - echo "Profiling memory usage during tests..."
      - go test -v -memprofile=mem.prof ./...
      - echo "Memory profile saved to mem.prof"
      - 'echo "View with: go tool pprof mem.prof"'

  release:
    desc: Build release binaries for multiple platforms
    deps: [clean, test-coverage-text, lint-check]
    cmds:
      - mkdir -p {{.BUILD_DIR}}/release
      - echo "Building release binaries..."
      - GOOS=darwin GOARCH=amd64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}-darwin-amd64 .
      - GOOS=darwin GOARCH=arm64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}-darwin-arm64 .
      - GOOS=linux GOARCH=amd64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}-linux-amd64 .
      - GOOS=linux GOARCH=arm64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}-linux-arm64 .
      - echo "Release binaries built in {{.BUILD_DIR}}/release/"

  help:
    desc: Show detailed help for common tasks
    cmds:
      - echo "Crum CLI Tool - Task Runner Help"
      - echo "================================"
      - echo ""
      - echo "Common tasks:"
      - echo "  task test           - Run all tests"
      - echo "  task test-coverage  - Run tests with coverage report"
      - echo "  task bench          - Run benchmark tests"
      - echo "  task build          - Build the application"
      - echo "  task ci             - Run CI pipeline"
      - echo "  task clean          - Clean build artifacts"
      - echo ""
      - echo "Development tasks:"
      - echo "  task setup-dev      - Setup development environment"
      - echo "  task watch          - Watch for changes and run tests"
      - echo "  task lint           - Run linter and formatter"
      - echo "  task security       - Run security scanner"
      - echo ""
      - 'echo "For a full list of tasks, run: task --list"'
